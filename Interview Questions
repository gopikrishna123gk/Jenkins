1) What is Jenkins?

    Jenkins is a self-contained, open-source automation server that can be used to automate
    all sorts of tasks related to building, testing, and delivering or deploying software.
    Jenkins can be installed through native system packages, Docker, (or) even run standalone
    by any machine with a Java Runtime Environment (JRE) installed.

2) Tell me something about Continuous Integration, Continuous Delivery, and
   Continuous Deployment?

   *) Continuous Integration:- A software development process where the changes made to software
                               are integrated into the main code as and when a patch is ready so
                               that the software will be always ready to be - built, tested, deployed,
                               monitored - continuously.
   *) Continuous Delivery:- This is a Software Development Process where the continuously integrated (CI)
                            changes will be tested & deployed continuously into a specific environment,
                            generally through a manual release process, after all the quality checks
                            are successful
   *) Continuous Deployment:- A Software Development practice where the continuously integrated (CI) changes
                              are deployed automatically into the target environment after all the quality 
                              checks are successful


3) What are the common use cases Jenkins is used for?

   Jenkins being open-source automation can be used for any kind of software-based automation. Some of the common 
    use-cases include but not limited to -
    *) Software build jobs
    *) Sanity/Smoke/CI/Regression test jobs
    *) Web/Data Scraping related jobs
    *) Code coverage measurement jobs
    *) General-purpose automation
    *) Reverse Engineering jobs
    *) Key Decoding jobs & many other jobs where software automation will be applicable.


4) What are the ways to install Jenkins?

   Jenkins can be installed using -
    *) Native System Package Manager like - apt (Linux), brew (Mac), etc.
    *) Docker (popular docker images for Jenkins is available for different platforms like Unix/Mac
       /Windows in the docker registry)
    *) Kubernetes (available as a helm chart and can be installed on our Kubernetes clusters)
    *) Standalone (on any machine with a Java Runtime Environment installed)

5) What is a Jenkins job?

  *) A Job/Project is the fundamental unit of a logical work (like a software build, an automation task,
     test execution, etc) using the Jenkins automation server and other required plugins, configurations
     & infrastructures.
  *) Jobs can be of different types like - a freestyle project, a multi-configuration project, a pipeline project,
     a multi-branch project, etc.

6)  What is a Jenkins Pipeline?

  *) Jenkins Pipeline
     The pipeline is a special type of Jenkins job - simply a sequence of steps controlled by a defined logic - which
     Orchestrates long-running activities that can span across multiple build agents. It is suitable for building 
     pipelines (formerly known as workflows) and/or organizing complex activities that cannot be easily achieved
     using a freestyle job.


7) What are the types of Jenkins pipelines?

   Jenkins Pipelines can be either - 
    *) Declarative pipeline :-Declarative pipeline makes use of numerous, generic, predefined build steps/stages
                              (i.e. code snippets ) to build our job according to our build/automation needs
    *) Scripted Pipeline:- with Scripted pipelines, the steps/stages can be custom-defined & used using a groovy
                           syntax which provides better control & fine-tuned execution levels.

8) Explain Jenkins Multibranch Pipeline?

  *) Jenkins Multibranch Pipeline
      It is a pipeline job that can be configured to Create a set of Pipeline projects according to the detected
      branches in one SCM repository. This can be used to configure pipelines for all branches of a single repository
      e.g. if we maintain different branches (i.e. production code branches) for different configurations like locales,
      currencies, countries, etc.

9) How do you store credentials in Jenkins securely?

    Credentials can be stored securely in Jenkins using the Credentials plugin, which stores different types of 
    credentials like - Username with a password, SSH username with the private key, AWS Credentials, Jenkins Build Token,
    Secret File/Text, X509 & other certificates, Vault related credentials securely with proper encryption & decryption
    as and when required.

10) How can we stop a scheduled job from being executed temporarily?

   Disable the job from the job details page to temporarily stop all scheduled executions & other factors/events from 
   triggering the job and enable it back to resume the job schedules/triggers. If a job is not required permanently,
   we can delete the job from the jobs list view page.

11) What are the ways to trigger a Jenkins Job/Pipeline?

   There are many ways we can trigger a job in Jenkins. Some of the common ways are as below -
    *) Trigger an API (POST) request to the target job URL with the required data.
    *) Trigger it manually from the Jenkins web application.
    *) Trigger it using Jenkins CLI from the master/slave nodes.
    *) Time-based Scheduled Triggers like a cron job.
    *) Event-based Triggers like SCM Actions (Git Commit, Pull Requests), WebHooks, etc.
    *) Upstream/Downstream triggers by other Jenkins jobs.

12) What is Jenkins Build Cause?

   Build Cause is a text attribute that represents what made a job's build to be triggered, say it could 
   be a Jenkins User (from UI), Timer for Scheduled jobs, Upstream jobs for a job which was triggered by 
   upstream job, etc. This is mainly used to identify the nature of the builds - be it nightly, manual,
   automated, etc.

13) How Jenkins knows when to execute a Scheduled job/pipeline and how it is triggered?

  Jenkins master will have the cron entries set up for the jobs as per the scheduled Job's configurations.
  As and when the time for a particular job comes, it commands agents (based on the configuration of the job)
  to execute the job with required configurations.

14) What are the credential types supported by Jenkins?

   In Jenkins, credentials are a set of information used for authentication with internal/external services to
   accomplish an action. Jenkins credentials are provisioned & managed by a built-in plugin called - Credentials
   Binding - plugin. Jenkins can handle different credentials as follows -
    *) Secret text :- A token such as an API token, JSON token, etc.
    *) Username and password :- Basic Authentication can be stored as a credential as well.
    *) Secret file :- A secret file used to authenticate some secure data services & security handshakes.
    *) SSH Username with a private key :- An SSH public/private key pair for Machine to Machine authentication.
    *) Certificate :- a PKCS#12 certificate file and an optional password.
    *) Docker Host Certificate Authentication credentials.
    *)  several other extensible credential types like -
        AWS credential, Azure secrets, etc. using commonly available plugins.

15) What are the Scopes of Jenkins Credentials?

  Jenkins credentials can be of one of the two scopes - Global & System

  *) Global :- the credential will be usable across all the jobs configured in the Jenkins instance (i.e. for all jobs).
               This is more suited for user Jobs (i.e. for the freestyle, pipeline, or other jobs) to authenticate itself 
               with target services/infrastructures to accomplish the purpose of the job)
  *) System :- This is a special scope that will allow the Jenkins itself (i.e. the core Jenkins functionalities & some 
               installed plugins) to authenticate itself to external services/infrastructures to perform some defined tasks. 
               E.g. sending emails, etc.

16) What is a Jenkins Shared Library and how it is useful?

*) As an organization starts using more and more pipeline jobs, there is a chance for more and more code being duplicated 
   in every pipeline job, since a part of the build/automation processes will be the same for most of the jobs. In such a
   situation, every other new upcoming job should also duplicate the same piece of code. To avoid duplications, the Jenkins
   project brought in the concept of Shared Libraries, to code - DRY - Don't Repeat Yourself.
 *) Shared libraries are a set of code that can be common for more than one pipeline job and can be maintained separately.
    Such libraries improve the maintenance, modularity & readability of the pipeline code. And it also speeds up the 
    automation for new jobs.

17) How Jenkins jobs can be Triggered/Stopped/Controlled programmatically?

   Jenkins Remote Access API can be used to do things like - 
  *) Retrieving information about jobs, views, nodes, builds, etc. from Jenkins for programmatic consumption.
  *) Trigger a build (both parameterized & non-parameterized), stop/abort a build, enable/disable a Job,
     group/remove jobs into/from views, etc.
  *) Create/copy/modify/delete jobs.
    and many other programming language-specific functionalities. It has wrappers for main programming languages
    like - Python, Ruby & Java. It can be triggered via CURL as below -
  *) Jobs without parameters
      Simply an HTTP POST on JENKINS_URL/job/JOBNAME/build.
  *) Jobs with parameters
     Simple example - sending "String Parameters":
    $ curl JENKINS_URL/job/JOB_NAME/buildWithParameters  --user USER:TOKEN --data id=123 --data verbosity=high

18) How to get the Jenkins version programmatically in Jobs/Pipelines or nodes other than master?

  *) To check the version of Jenkins, load the top-level page or any top-level Remote Access API path like the '.../api/*'
     page and then check for the 'X-Jenkins' response header.
  *) This contains the version number of Jenkins, like "1.404". This is also a good way to check if an URL is a Jenkins URL.

19) What happens when a Jenkins agent is offline and what is the best practice in that situation?

*) When a job is tied to a specific agent on a specific node, the job can only be run on that agent and no other agents can 
   fulfill the job request. If the target node is offline or all the agents on that particular node are busy building other
   jobs, then the triggered job has to wait until the node comes online or an agent from that node becomes available to 
   execute the triggered build request.
*) As a result, a triggered job may sometimes wait indefinitely without knowing that the target node is offline. So, it is
   always the best practice to tie the jobs to a group of nodes & agents, referred to with a 'Label'. Once a job is tied to 
   a Label, instead of a specific node/agent, any of the nodes/agents falling under the label can fulfill a build request,
   when a job is triggered. This way we can reduce the overall turn-around time of the builds.
 *) Even then if a job is waiting for more time for the nodes/agents, then it is time to consider adding more nodes/agents.

20) What is the Blue Ocean?

 *) Blue Ocean is the redefined user experience for Jenkins. Designed from the ground up for Jenkins Pipeline, it is still
    compatible with freestyle jobs, Blue Ocean reduces clutter and increases clarity. Blue Ocean’s main features include -
 *) Sophisticated visualizations of continuous delivery (CD) Pipelines, allowing for fast and intuitive comprehension of 
    your Pipeline’s status.
 *) Pipeline editor - makes the creation of Pipelines approachable by guiding the user through an intuitive and visual
    process to create a Pipeline.
 *) Personalization to suit the role-based needs of each member of the team.
 *) Pinpoint precision when intervention is needed and/or issues arise. Blue Ocean shows where in the pipeline attention
    is needed, facilitating exception handling and increasing productivity.
 *) Native integration for branch and pull requests, enables maximum developer productivity when collaborating on code with
    others in GitHub, Bitbucket, etc.

21. What is the Jenkins User Content service?

    *)Jenkins has a mechanism known as "User Content", where administrators can place files inside the $JENKINS_HOME
      /userContent folder and these files are served from yourhost/jenkins/userContent.
    *) This can be thought of as a mini HTTP server to serve images, stylesheets, and other static resources that you
       can use from various description fields inside Jenkins.

22) How is continuous integration achieved using Jenkins?
    Continuous integration is a process where a developer’s code changes are constantly integrated into the main code 
    and the same will be tested automatically and the results of the tests will decide whether the change is ready for 
    deployment. In this process -
   *) Developer Makes a change - commit/pull_request - in feature/dev branch
   *) Source Control Management system generates appropriate events
   *) SCM Specific Jenkins Plugins like Git/SVN will detect those events from the configured repositories and these
      events will be used to Trigger - build/dependent/test - jobs on Jenkins
   *) After the Test/Dependent jobs are completed, the change/patch will be labeled according to the status of the 
      test job
   *) Based on the Status (i.e. readiness of a change to be merged with the main branch), the Continuous Delivery (or)
      Continuous Deployment strategy/tool will take it forward.

23) What is Artifact Archival & how to do it in Pipelines?

 *) Artifacts are the exportable/storable/archivable results of a specific job build. This can be configured using a
    plugin called - Copy artifact Plugin. Based on the configured pattern, the files/directories matching the configured
    patterns will be archived for a Jenkins build, which can be used for future references. In the pipeline, it can be 
    configured as follows -
 *) archiveArtifacts artifacts: 'output/**/*'

24) How to configure inclusions & exclusions in Artifacts Archival?

  *) Artifact archival takes in a pattern for matching target files. Similarly, it also takes in a pattern (ANT build
     system pattern for matching files) for exclusion as well which will be ignored while selecting the files for 
     archival.
   *) For e.g.
       archiveArtifacts artifacts: 'output/*.txt', excludes: 'output/specific_file.txt'


25) How can we share information between different build steps or stages in a Jenkins Job?

   Every build step or stage will be running in its process and hence sharing information between two different
   build steps is not so direct. We can use either a File, a Database Entry, an Environment Variable, etc. to 
   share info from one build step to another or a post-build action.

26) How code coverage is measured/tracked using Jenkins in a CI environment?

  Using language-specific code coverage plugins like JaCoCo, CodeCov, etc (or) generic tools/plugins like Sonarqube
  which will add the code coverage data to builds with some minor tweaks in the code and the same can be displayed
  as a graph in Jenkins.

27) Default Environment Variables by Jenkins & How to introduce custom environment variables?

   Jenkins provides several environment variables by default like :-
     *) BRANCH_NAME
     *) BUILD_NUMBER 
     *) BUILD_TAG
     *) WORKSPACE

28) How can a job configuration be reset to an earlier version/state?

    From the Job details page, we can use Job Config History to - See diff, Review & Revert the Job configs from the 
    history of changes we have made to a particular job. This will be super useful when a job is misconfigured by 
    someone by mistake, it can be reviewed and reverted easily to any of its earlier states.

29) How to do Global Tools Configuration in Jenkins?

   Global Tools are tools that need to be installed outside the Jenkins environment and need to be controlled from
   within the Jenkins environment. Hence it needs its corresponding Jenkins plugin as well. Steps to using a Global
   Tool generally include -
 *)Install the tool Plugin into the Jenkins instance, to include the global tool into a list of global tools used
   by Jenkins.
 *) Install the tool in the Jenkins instance (or) provide away (maybe a command to download and) install the tool 
    during runtime.
  *) Go to Manage Jenkins -> Global Tools Configuration and Scroll through the tool list and configure the global 
     tool-specific configurations.
  *) Make use of the installed global Tool in your job/pipeline.

30) How to create & use a Shared Library in Jenkins?

   Basic requirements for a Jenkins shared library to be used in a Pipeline Code are -
   *) A Repository with pipeline shared library code in SCM.
   *) An appropriate SCM Plugin configuration for the Jenkins instance.
   *) Global Shared Library should be configured in Jenkins Global configuration.
   *) Include the Shared Library in the Pipeline Code and use the methods defined in the Jenkins
      Shared Library.
    E.x:-
       #!/urs/bin/env groovy
       @Library('fs_jenkins_shared_library@v2.0.7')_

31) How to install a Custom Jenkins Plugin or a Version of Plugin Not available in Jenkins Update Center?

 *) Generally, it is the best practice to use the latest version of a plugin. But there are ways to install 
    custom plugins or outdated versions of a published plugin. Jenkins Plugins are exported using a .hpi file
    and the same can be installed in multiple ways -
  *) Using the Jenkins CLI
       java -jar jenkins-cli.jar -s http://localhost:8080/ install-plugin SOURCE ... [-deploy] [-name VAL]
       [-restart]
  *) The above command Installs a plugin either from a file, an URL or from the update center.
    SOURCE:- If this points to a local file, that file will be installed. If this is an URL, Jenkins downloads
    the URL and installs that as a plugin. Otherwise, the name is assumed to be the short name of the plugin in 
    the existing update center (like "findbugs") and the plugin will be installed from the update center.
         deploy:- Deploy plugins right away without postponing them until the reboot.
         name VAL:- If specified, the plugin will be installed as this short name (whereas normally the name is
                    inferred from the source name automatically).
         restart:- Restart Jenkins upon successful installation.
        Advanced Installation :- via :- Web UI
  *) Assuming a .hpi file has been downloaded, a logged-in Jenkins administrator may upload the file from within 
    the web UI:
  *) Navigate to the Manage Jenkins > Manage Plugins page in the web UI.
  *) Click on the Advanced tab.
  *) Choose the .hpi file under the Upload Plugin section.
  *) Upload the plugin file.
  *) Restart the Jenkins instance
  *) Advanced Installation - via - On the master
  *) Assuming a .hpi file has been explicitly downloaded by a systems administrator, the administrator can manually
     place the .hpi file in a specific location on the file system.
  *) Copy the downloaded .hpi file into the JENKINS_HOME/plugins directory on the Jenkins controller (for example,
     on Debian systems JENKINS_HOME is generally /var/lib/jenkins).
  *) The master will need to be restarted before the plugin is loaded and made available in the Jenkins environment.

32) How to download the Console log for a particular Jenkins build programmatically?

    *) Using the Jenkins CLI - console - command
      $ java -jar jenkins-cli.jar console JOB [BUILD] [-f] [-n N]
   *) Produces the console output of a specific build to stdout, as if you are doing 'cat build.log'
     JOB: Name of the job
     BUILD: Build number or permalink to point to the build. Defaults to the last build
     -f: If the build is in progress, append console output as it comes, like tail -f
     -n N: Display the last N lines.
    E.x:-
     $ ssh -l <ssh_username> -p <port_no> <Jenkins_URL> console <JOB_NAME>

33) What is Jenkins Remote Access API?

   Jenkins provides remote access API to most of its functionalities (though some functionalities are programming 
   language-dependent). Currently, it comes in 3 flavors -
       XML
       JSON with JSONP support
       Python
 *) Remote access API is offered in a REST-like style. That is, there is no single entry point for all features,
    and instead, they are available under the ".../api/" URL where the "..." portion is the data that it acts on.
  For ex:- if your Jenkins installation sits at interviewbit.com, visiting /api/ will show just the top-level 
            API features available – primarily a listing of the configured jobs for this Jenkins instance.
 *) if we want to access information about a particular build, e.g. https://ci.jenkins.io/job/Infra/job/jenkins.io
    /job/master/lastSuccessfulBuild/, then go to https://ci.jenkins.io/job/Infra/job/jenkins.io/job/master/
     lastSuccessfulBuild/api/ and you’ll see the list of functionalities for that build.

34) What is In-process Script Approval and how it works?

   *) Jenkins, and several plugins, allow users to execute Groovy scripts in Jenkins. To protect Jenkins from the 
      execution of malicious scripts, these plugins execute user-provided scripts in a Groovy Sandbox that limits
      what internal APIs are accessible.
   *) This protection is provided by the Script Security plugin. As soon as an unsafe method is used in any of the
      scripts, the "In-process Script Approval" action should appear in "Manage Jenkins" to allow Administrators to make
      a decision about which unsafe methods, if any, should be allowed in the Jenkins environment.
   *) This in-process script approval inherently improves the security of the overall Jenkins ecosystem.

35) Can we monitor Jenkins using common Observability tools?

   Common monitoring platforms like DataDog, Prometheus, JavaMelody & few others - have their corresponding
   Jenkins plugin, which when configured, sends Metrics to the corresponding Monitoring platform, which can
   then be Observed with the latest tools & technologies. The same can be configured with Alarms & Notifications 
   for immediate attention when something goes wrong.

36) What is a Ping Thread in Jenkins and how it works?

  *) Jenkins installs "ping thread" on every remote connection, such as Controller/Agent connections, regardless
     of its transport mechanism (such as SSH, JNLP, etc.). The lower level of the Jenkins Remoting Protocol is a 
     message-oriented protocol, and a ping thread periodically sends a ping message that the receiving end will
     reply to. The ping thread measures the time it takes for the reply to arrive, and if it’s taking excessive
     time (currently 4 minutes and configurable), then it assumes that the connection was lost and initiates the 
     formal close down.
  *) This is to avoid an infinite hang, as some of the failure modes in the network cannot be detected otherwise.
     The timeout is also set to a long enough value so that a temporary surge in the load or a long garbage
     collection pause will not trip off the close-down.
  *) Ping thread is installed on both controller & agent; each side pings the other and tries to detect the problem
    from their sides.
 *) The ping thread time out is reported through java.util.logging.Besides, the controller will also report this
    exception in the agent launch log. Note that some agent launchers, most notably SSH agents, writes all 
    stdout/stderr outputs from the agent JVM into this same log file


*) scenario based interview quesitions

  1) Explain what Jenkins is and its main purpose.

       Jenkins is an open-source automation server used for automating various tasks in software development,
       such as building, testing, and deploying code. For instance, if you have a Java application, Jenkins
       can be set up to automatically build and test the code every time changes are pushed to the repository.
       This ensures code quality and automates repetitive tasks.

  2) What are Jenkins pipelines, and why are they important?

      Jenkins pipelines are a way to define and automate the entire software delivery process. They are written in
      a domain-specific language and allow you to create complex build, test, and deployment workflows. For example,
      you can define a pipeline to build a Java application, run unit tests, and deploy it to a staging server. This 
      ensures consistency, traceability, and repeatability in your software delivery process.

  3) How can you trigger a Jenkins build job after a code commit is pushed to a Git repository?

      You can set up a "webhook" in your Git repository that sends a POST request to the Jenkins server every time a
      code commit is pushed. Jenkins can be configured to listen for these webhooks and automatically trigger the 
      appropriate build job. For example, when a developer pushes code to a GitHub repository, Jenkins can be configured 
      to run a build job to compile and test the code.

  4) Describe the differences between Jenkins freestyle projects and pipeline projects.

      A freestyle project is a traditional way of configuring Jenkins jobs through a user interface. It's suitable for 
      simple tasks like building and testing code. In contrast, a pipeline project uses code-defined pipelines
      (e.g., using the Groovy-based DSL) to define complex workflows, including building, testing, and deploying
      applications. Pipeline projects are highly flexible and can be stored in source control for versioning.

  5) Explain what a Jenkins agent (or node) is and how it's used in Jenkins.

       A Jenkins agent, also known as a node, is a machine or container that Jenkins uses to execute build and deployment
       jobs. For instance, if you have a Jenkins master server and multiple agent machines, you can distribute the workload.
       When a build job is triggered, Jenkins can delegate it to an available agent for execution. This allows for parallel 
       job execution, which is particularly useful for large projects.

  6) How can you secure Jenkins and restrict access to certain users (or) roles?

       You can secure Jenkins by using authentication and authorization mechanisms. Jenkins can integrate with external 
       authentication providers (e.g., LDAP, Active Directory) for user authentication. You can also set up role-based 
       access control (RBAC) to specify what users or groups can do in Jenkins. For example, you can grant "admin" access
       to specific teams and "read-only" access to others, ensuring proper security.

  7) What is a Jenkins plugin, and can you provide an example of when you might use one?

       A Jenkins plugin is an extension that adds functionality to Jenkins. For instance, if you need to integrate Jenkins
       with a cloud provider like AWS, you can use a plugin like the "Amazon EC2 Plugin." This plugin allows you to
       dynamically create and destroy Jenkins build agents on AWS based on the workload. This is useful when you want to 
       scale your Jenkins environment based on demand.

  8) Explain the purpose of Jenkins shared libraries and provide an example of their use?

       Jenkins shared libraries allow you to reuse and share common code, functions, and workflows across multiple Jenkins
       pipelines. For instance, if you have a set of custom functions for deploying applications, you can create a shared
       library and include it in various pipeline scripts. This ensures consistency and reduces duplication of code.

  9) How can Jenkins help with continuous integration and continuous delivery (CI/CD)?

      Jenkins plays a critical role in CI/CD by automating the software delivery process. Let's consider a scenario where
      a development team is using Git for version control. When developers commit code changes, Jenkins can automatically 
      build and test the application. If the tests pass, Jenkins can then deploy the application to a staging environment
      for further testing. If all stages pass, Jenkins can promote the code to production, ensuring a seamless CI/CD pipeline.

  10) What is "Jenkinsfile," and how is it used in Jenkins pipelines?

      A "Jenkinsfile" is a text file that defines the entire pipeline using the Declarative or Scripted DSL. In a 
      Java project, for instance, the Jenkinsfile can specify the stages of the pipeline, including building, testing, and 
      deployment. This file is stored in the project's source control repository, providing versioned and repeatable
      pipeline definitions.

  11) Explain the differences between Jenkins and other CI/CD tools like Travis CI and CircleCI.

       Jenkins is a highly extensible open-source automation server. It is often preferred by organizations with complex and
       customizable CI/CD needs. In contrast, Travis CI and CircleCI are cloud-based CI/CD services. They are more user-friendly
       and easier to set up, making them suitable for smaller projects. Jenkins is often chosen when organizations need more
       control and flexibility over their CI/CD processes.

  12) What are Jenkins slaves and how do they differ from agents or nodes? Can you explain how to set up a Jenkins slave on
      a Windows machine?

         Jenkins slaves (or agents/nodes) are additional machines used to distribute build and deployment tasks, reducing 
         the load on the Jenkins master. To set up a Windows-based Jenkins slave, you would install the Jenkins agent as a 
         Windows service on the target machine. For example, you'd use the command:
           $ java -jar agent.jar -jnlpUrl http://jenkins-server:port/computer/agent-name/slave-agent.jnlp -secret secret-key

  13) Jenkins pipelines can be defined in both Declarative and Scripted . Compare these two pipeline , and when would 
       you choose one over the other?

      Declarative:- it is more user-friendly and has a simplified syntax, ideal for straightforward pipelines.
      Scripted:- offers more flexibility but can be complex. You might choose Declarative for simple Java builds and 
                 Scripted for projects with complex requirements, like multi-language builds or intricate conditional
                 logic.

  14) Can you elaborate on Jenkins' security and how you'd configure Jenkins to work with different authentication providers,
      such as LDAP, Active Directory, or GitHub OAuth?

        Jenkins security settings involve user authentication, authorization, and project-based matrix security.
        For LDAP or Active Directory integration, you'd configure the necessary plugins and settings. For GitHub O-Auth,
        you'd configure OAuth application settings in GitHub and Jenkins, allowing users to log in using their 
        GitHub credentials.

  15) Describe the concept of Blue-Green deployments. How can Jenkins be used to implement Blue-Green deployments,
      and what are the benefits and challenges?

       Blue-Green deployments involve having two identical environments, one active (Blue) and the other idle (Green).
       Jenkins can manage Blue-Green deployments by orchestrating the switch between environments. In Jenkins,
       you'd typically use infrastructure-as-code (IaC) scripts to provision and configure the environments. A challenge 
       is to ensure that data migration and rollbacks are handled smoothly during the switch.

  16) Jenkins offers distributed build capabilities. How would you design a Jenkins architecture for high availability 
       and scalability, and what considerations would you take into account?

       For high availability, you might set up a Jenkins master with multiple agents running on different servers.
       Use Jenkins' distributed builds feature. For scalability, consider containerization using Docker and Kubernetes
       to dynamically scale agents. Additionally, implement data backups, monitoring, and failover mechanisms for high
       availability.

  17) Explain the concept of "Infrastructure as Code" (IaC) and its role in Jenkins pipelines. Provide an example of
      using IaC in a Jenkins pipeline?

        IaC involves defining and provisioning infrastructure through code. In Jenkins pipelines, you can use IaC tools
        like Terraform (or) Ansible to create and configure environments. For example, you could have a Jenkins pipeline 
        that uses Terraform to provision AWS resources (e.g., EC2 instances and load balancers) as part of a 
        deployment process.

  18) Can you describe how Jenkins handles job concurrency and what strategies can be used to manage concurrent builds
      effectively?

       Jenkins manages concurrency through build executors (build slots). Strategies include configuring the number of 
       executors per node and using the "Quiet Period" to queue jobs. For example, if you have Jenkins nodes with multiple
       executors and several builds in the queue, Jenkins automatically assigns builds to available executors, ensuring
       efficient resource utilization.

  19) Jenkins shared libraries are a powerful feature. Provide an example of a complex Jenkins shared library and explain
      its benefits in maintaining Jenkins pipelines?

       A shared library can include functions for handling deployments across multiple environments. For instance, you 
       might have a shared library that defines deployment strategies (e.g., Blue-Green, Canary) and provides reusable 
       functions to deploy applications with different strategies. This simplifies pipeline scripts and ensures consistency
       across teams.

  20) Discuss the challenges and best practices for handling secrets and credentials in Jenkins, particularly in a 
      Jenkins pipeline, and explain the use of Jenkins' built-in credential handling versus external solutions like
      HashiCorp Vault?

       One challenge is securely storing sensitive data like API keys. Jenkins provides a built-in credential store where
       you can store credentials securely and use them in pipelines. Alternatively, you can integrate with external solutions
       like HashiCorp Vault to store and manage secrets. In a Jenkins pipeline, you'd use these credentials or secrets to
       access external systems securely.

  21) How to fix a broken build in your project?

       *) The user needs to open the console output for the build and will try to see if any file changes that were missed
          during building the project. If there are no issues on that then a better approach would be clean and update his 
          local workspace to replicate the problem on their local machine and will try to solve it.
      *) To make sure Jenkins build is not broken at all we need to make sure that we perform a successful clean install
         on the local machine with all unit tests. Then make sure that all code changes are checked in without any issues.
         Then synchronize with a repository to make sure that all required config and changes and any differences are  
         checked into the repository. 

  22) How to Move (or) copy Jenkins one server to another?

       *) Slide a job from one installation of Jenkins to another by copying the related job directory
       *) Make a copy of an already existing job by making a clone of a job directory by a different name
       *) Renaming an existing job by renaming a directory.

  23) What do you mean by Jenkins File and it's Advantages?

      A Jenkins file is a text file that contains the definition of a Jenkins Pipeline and it is generally checked
      into source control. 
       *) Audit trail for the Pipeline can be monitored
       *) It serves as a single source of truth for the Pipeline, which can be viewed and edited by multiple members 
          of the project.

  24) What is the Use of Setting environment directive?

      The environment directive specifies a sequence of key-value pairs which will be defined as environment variables
      for the all steps, or stage-specific steps, depending on where the environment directive is located within the 
      Pipeline. This directive supports a special helper method credentials() which can be used to access pre-defined
      Credentials by their identifier in the Jenkins environment.

  25) What are the Stages in Jenkins?

       A stage block defines a conceptually distinct subset of tasks performed through the entire Pipeline. Stages contain
       a sequence of one or more stage directives, the stages section is where the bulk of the "work" described by a Pipeline 
       will be located. Minimum, it is recommended that stages contain at least one stage directive for each discrete part 
       of the continuous delivery process, such as Build, Test, and Deploy.

  26) How can you define Continuos delivey?

      Continuous delivery (CD ) is a product design methodology in which team software in short cycles, guaranteeing that 
      the product can be dependably released whenever and, when releasing the product, doing as such manually. It goes for
      building, testing, and releasing programming with more prominent speed and recurrence. The methodology lessens the cost,
      time, and risk of conveying changes by considering progressively gradual updates to applications underway.

 27)  How can you define Continuos integration?

      Consistent integration is a procedure where all development work is incorporated as ahead of schedule as could 
      reasonably be expected. The subsequent artifacts are consequently made and tried. This procedure permits to recognize
      mistakes as ahead of schedule as could reasonably be expected. Jenkins is a well known open source device to perform
      constant integration and build.

  28) What does it meant to Shift left in DevOps?

        If you somehow managed to diagram the conventional programming development life cycle on a bit of paper, the
        left half of the chart would almost certainly incorporate tasks, for example, design and development, while the
        right side would probably incorporate client feedback, stress testing, and production staging.

  29) What is the use of Ansible in Jenkins?

       *) Ansible is an incredible asset for IT automation and can be utilized in a CI/CD procedure to arrangement the
          target environment and to an application on it. The most effective method to utilize Ansible for environment 
          provisioning and application deployment in a Continuous Integration/Continuous Delivery (CI/CD) process utilizing
          a Jenkins Pipeline. Jenkins is a notable tool for automation CI/CD. Shell scripts are regularly utilized for 
          provisioning environments (or) to deploy applications amid the pipeline stream. Despite the fact that this could
          work.
       *) The motivation behind utilizing Ansible in the pipeline stream is to reuse jobs and Playbooks for provisioning,
          leaving Jenkins just as a procedure orchestrator rather than a shell script agent.

   30) Name 4 Kpi's in DevOps?

       *) Deployment frequency:- The capacity to make code changes rapidly and effectively is a key upper hand for any 
                                 organization that necessities to convey new highlights rapidly to clients, and react to
                                 their feedback.
      *) Speed of deployment:- Frequent code deployment depends in enormous part on having the option to move rapidly 
                               from committed code to that code running effectively in the production condition.
      *) Failure Rate:- It is extraordinary to send all the more regularly and rapidly, however on the off chance that
                       changes bomb similarly as every now and again, you've picked up nothing. Failed deployments can
                       bring services down, bringing about lost income and baffled clients. DevOps practices can have
                       a major effect on the failure rate.
      *) Time to Recovery:- At the point when service goes out, the capacity to recuperate rapidly can have an immense 
                           effect on business results. It's not astonishing, at that point, that enormous web organizations
                           like Google, Etsy, Netflix, and Amazon push the envelope in their endeavors to improve time to
                           recuperation, normally breaking their applications and foundation to find -   arrangement
                           against - anything that can turn out badly.

  31) What do you do to make that your project build does'nt break in Jenkins?

    *) We ensure that we perform effective clean introduce on our local machine with all unit tests. At that point, 
       we ensure that we check in all code changes. We do complete a Synchronize with the archive to ensure that all
       required config and POM changes and any differences are registered with the repository. You have to pursue the
       underneath referenced strides to ensure that the Project build does not break:
         *) Perfect and successful installation of Jenkins on your local machine with all unit tests.
         *) All code changes are reflected effectively.
         *) Checking for repository synchronization to ensure that every one of the distinctions and changes identified
            with config and different settings is spared in the repository.
   *) There is a "build failure analyzer plug-in" which tells us a reason for build failure in case the build gets failed
      even after following the above steps. The module accompanies an empty information base of failure causes.
      Populating this learning base is finished by utilizing the connection "Failure Cause Management". The connection
      has appeared if the consent UpdateCauses is set for the current user. Press "Create New" and include a name and a
      depiction for the Failure Cause. The depiction ought to contain the motivation behind why this build flopped just
      as potential answers for the build failure.

  32) Explain the trigger's?

  *) There are various ways to re-trigger the pipeline in an automated way, triggers are characterized in the Jenkins. 
     A few of pipelines are cooperating with sources like GitHub, BitBucket, or different triggers first then they are 
     actualized to play out a particular activity.
  *) A build trigger might be utilized for different purposes relying upon the context of the project.
  *) For instance:- In the event that an enterprise might want to have a CI/CD pipeline setup utilizing Jenkins. In this
     case, an organization can set up build triggers to trigger downstream system build, for example, 
        *) Integration tests
        *) Code health check up
        *) Load Tests
        *) Start to finish Tests
        *) Deployment.
  *) The above steps will be anchored to the parent work and can be activated one by one or in parallel contingent upon 
     the stage (this is the place where build trigger is utilized, trigger the downstream system build if the parent build 
     is a success).
  *) Build occasionally can be utilized to keep running on standard jobs(in the event that we have a team set up which will 
     be deploying master every evening). At that point, we can set up the jobs to build occasionally late night times at a 
     fixed time (additionally the job can be activated dependent on progress as clarified in (1)
  *) Polling SCM keeps checking for any new code addition by checking commit history and trigger build thereafter.Pooling
     your archive and construct dependent on that.

 33) Polling a Git repository for new Commits is Considered a Jenkins anti-pattern, what is Sound alternative to SVN
     Polling?

     *)  A continuously checking /monitoring SCM tools like GIT or subversion for identifying any new commits are considered
         a waste of clock cycles and not considered best practices. We should avoid this process. There is a better approach 
         available to us which is a reversal of the above approach. The other approach is industry standard one and more 
         popular. The other approach encourages build getting triggered from source code tool whenever new code is committed
         (or) existing code undergoes some change. This is very easy to configure with GitHub or GItLab using a post-commit
         hook that runs every time code commit is successful. This setup eliminates the need for constantly monitoring 
         source code as a post-commit hook will trigger the build whenever any code gets committed in the source code.

  34) What is Input directives? 

     *) With the help of input directives, the user could prompt the inputs with the help of input steps. The stage is paused
        after different options have been applied and before we can enter to the stage agent to evaluate its condition. Once 
        the input is approved, we could continue with the stage ahead. The parameters that are given as the part of input
        submission will be available in the environment for the rest of the stage.

  35) How can you temporarily turn off Jenkins security, if the administartive users have locked themseleves out of admin 
      console?

      *) The JENKINS_HOME organizer contains a document named config.xml. At the point when security is empowered, this record
         contains an XML component named useSecurity that will be set to true. By changing this setting to false, security will
         be handicapped whenever Jenkins is restarted. <useSecurity>false</useSecurity> 
      *) The incapacitating security ought to dependably be both a final retreat and a brief measure. When any conformation 
         issues are settled, make certain to re-empower Jenkins security and reboot the CI server.
      *) Please find the steps below :-
        1) Go to $JENKINS_HOME in the file system and discover the config.xml document.
        2) Open this document in the editorial manager.
        3)Search for the <useSecurity>true</useSecurity> component in this document.
        4) Supplant true with false
        5) Expel the components authorization strategy and security realm
        6) Start Jenkins
     *) At the point when Jenkins returns, it will be in an unsecured mode where everybody gets full access to the framework.
        In the event that this is as yet not working, taking a stab at renaming or erasing config.xml.

  36) What is the d/f b/w  Agent and Node? 

      Node:- Node is for scripted pipelines,  In scripted pipelines, the node step can be utilized for executing a script/advance
              on a particular agent, mark, slave. The node step alternatively takes the operator or name and afterward a 
              conclusion with code that will be executed on that node.
      Agent:- Agent is for declarative pipelines, In declarative pipelines, the agent directive is utilized for determining, 
              which agent /slave the job/task is to be executed on. This mandate just enables you to indicate where the 
              undertaking is to be executed, which agent, slave, mark or docker image.

  37) Name 3 Steps (or) Stages a typical Jenkins Pipeline must include?

         Jenkins pipeline is configured to build a project by extracting it from source code and then ensure that the build
         goes through different stages like unit, performance, and user acceptance testing. Once every stage is successful,  
         it also facilitates deployment to an application server. So overall if we talk about different stages any project
         goes through can be classified into three broad categories 

      *)  Build :-This stage ensures code extracted from code repository for build purpose and in case of any failure,
                  developers come to know the reason for build failure. This is a very critical stage in build pipeline 
                  and subsequent stages will be triggered only when the project exits this stage successfully.
      *) Test :- This stage ensures the build is unit /performance/user tested so the issue can be caught at an early stage 
                 only.
      *) Deploy :- This stage took care of deployment request once testing is successful It is the last stage in the pipeline.


   38) name 2 ways that jenkins node can be configured to communicate back to jenkins master?

       1) We can start a Node agent from a browser window itself.
       2) There is another way of starting an agent from the command line as well.
    The JNLP file gets downloaded when we start an agent using a browser window. When this file runs it triggers a separate
    process to launch Jenkins jobs. There is a different process which runs in case of agent get launched from the command
    line. There is one JAR file which is required on the client machine and this file gets launched from the command line
    but still, you need to refer slave agent JNLP file available on Jenkin server. The command line triggers a process on 
    the client machine which actually communicates with Jenkin’s mater and triggers build jobs in Jenkin when it identifies
    idle clock cycles.

  39) What is Backup-Plugin in jenkins?

    *) Jenkins Backup Plugin is used to take a back up of the configurations and settings so as to use them later on if there
       is any failure
    *) in jenkins ui ->click on Manage Jenkins 
    *) Click on Available section -> search for ThinBackup in the filter section
    *) We have to fill basic details like backup directory as shown on the below screen and save the settings. The back-up
       will be stored to the Backup Directory.
    *)  We can test if a backup is working on not by clicking on Backup Now

   





     
