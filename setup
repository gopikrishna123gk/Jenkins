*) Configuring GitHub for Jenkins Continuous Integration

 1)  Go to your Github profile and navigate to Settings
 2) In the settings screen, click on the “Developer settings” menu 
    and click on “Personal access tokens.”
 3)  In the “Personal access tokens” tab, click on the “Generate new token”
     button and provide necessary details as desired (an example is provided
     in the below figure), and click on the “Generate token” button.
 4) Post successful creation of the token, the newly generated secret text in
    GitHub is to be copied for future usage in Jenkins.

*) Configuring Jenkins for GitHub Integration

  1) Click on “Manage Jenkins.”
  2) Click on “Configure System” and go to the following ‘GitHub‘ section  
  Note: If the above “GitHub Server” section is found missing in Jenkins, make 
        sure to manually install the missing GitHub plugin from the installed list 
         of tools shown below.
  3) Steps to follow- Go to: Jenkins Dashboard -> Manage Jenkins -> Manage Plugins -> 
   ‘Available’ tab -> Enter Git in search bar and filter -> Install required plugin
  4) Make sure to add the copied secret key in the above credentials by:
   Click on the “Add” -> “Jenkins” button in the Github Server section’s Credentials field.
   Select “Secret text” from the “Kind” dropdown.
  5) Paste the previously copied secret text from GitHub in the Secret field as displayed below,
     while providing an ID such as “jenkins-integration,” and then click on the “Add” button.
  6) Once the Secret text is successfully added, let us test the connection by clicking on the 
     “Test connection” button and verify the confirmation message 


*) configuring Maven Plugin in Jenkins

1) Click on the Manage Jenkins link in the left menu bar
2)  Under the System Configuration section, click on the Manage Plugins options
3) Under the Plugin Manager, click on the Available tab  and search for the maven plugin
   It will show the Maven Integration plugin as a result
4) Select the checkbox in front of the Maven Integration plugin and click on the
   Install without restart button
5) Once the plugin installs successfully, click the checkbox to restart Jenkins
6) After the restart of Jenkins, the Maven Jenkins plugin will be installed successfully
   and ready for configuration

*) integrate Maven with Jenkins

  *) setup Java Path in Jenkins
    1)  Open the Jenkins and go to Jenkins Dashboard. After that, click on the
        Manage Jenkins 
    2) Now click on the Global Tool Configuration
    3) After that, we need to set the JDK path in Jenkins. To set the JDK path in Jenkins
      *) Click on the Add JDK  button. Kindly note that by default, "Install Automatically"
         will be checked, so since we are going to use the JDK installed in our local machine,
        "Install automatically" will install the latest version of JDK, and you will also need 
         to provide credentials to download relevant JDK.
      *) Give JDK's name as we gave as JDK 1.8, as this is currently installed in my machine.
      *) Give the path of JDK in JAVA_HOME textbox

*) setup Maven Path in Jenkins

  1) Click on the Add Maven button. Kindly note that by default, "Install Automatically" will be checked,
     so we will uncheck it because we don't want that Jenkins will automatically install the latest
      version of Maven.
  2) Give the name of Maven as we gave as Maven 3.6, as this is the version set up in my machine.
  3) Give the path of Maven in the MAVEN_HOME textbox.
  4) Click on the Save button.


*) integrate Ansible with Jenkins

  1) Go to Manage Jenkins 
  2) Manage Plugins >Available > search Ansible.
   *)  If you are already installed Ansible Plugin on your Jenkins It will display in the Installed section.
   *) Now we can see the Invoke Ansible Playbook option in the Build Environment section but we need to
      configure Ansible path for Jenkins.

*) setup Ansible in Jenkins

  1) Go to Manage Jenkins > Global Tool Configuration >
     It will display Ansible on the list.
  2) Goto Jenkins Home > New Item > Create New Freestyle Project.
  3) We create a new freestyle project now lets configure our project.
     Goto source code management section and add your code repository
     here you are free to use any of the source code management platforms
  4) Goto Build section and select Invoke Ansible Playbook. Once you select
     that option it will display ansible-playbook configuration 

*) Integrate Docker with Jenkins

  1)  Select Manage Jenkins in the menu on the left side of the Jenkins dashboard.
  2)  Click Manage Plugins in the Manage Jenkins window
  3)  Select the Available tab in the Plugin Manager window.
  4) Type Docker in the search field, and select the box next to the Docker plugin
     that appears in the search results.
  5) Click the Download now and install after restart button.
  6)  When all the necessary plugin components download, select the box at the bottom 
     of the screen to restart Jenkins.

  *) Setup Docker Build Agent in Jenkins

   1. Select the Manage Nodes and Clouds item in the System Configuration section.
   2. Click Configure Clouds in the menu on the left side
   3. Expand the Add a new cloud list and select Docker.
   4. Provide the name and URI for the Docker host in the relevant fields. Enable 
      the host by selecting the box.
   5. Select the Expose DOCKER_HOST box.
   6. Click the Docker Agent templates button to open additional configuration options.
   7. Provide the label for identifying the host, and enable the agent by selecting the 
      Enabled option.
   8. Name the Docker template and provide the path to the Docker image.
   9. Specify the home folder for the Jenkins user you created.
  10. Choose Connect with SSH from the list in the Connect method section.
      Additional SSH configuration options appear.
  11. Select Use configured SSH credentials in the SSH key section. Provide the
      credentials you set up for the image in the field that appears below.
  12. Select Non verifying Verification Strategy in the Host Key Verification Strategy section.
  13. Click Save when you finish configuring the host.


*) Integrate Kubernetes with Jenkins

  *) Create a namespace that allows you to segregate Jenkins objects within the Kubernetes cluster.
  *) Create a PersistentVolume to store your Jenkins data. This will preserve data across restarts.
    1) Create a file called jenkins-namespace.yaml with the following content:
             apiVersion: v1
             kind: Namespace
             metadata:
             name: jenkins
    2) Apply the spec by entering:
      $ kubectl apply -f jenkins-namespace.yaml
    3)following snippet into a file called jenkins-volume.yaml:
          apiVersion: v1
          kind: PersistentVolume
          metadata:
          name: jenkins-pv
          namespace: jenkins
          spec:
         storageClassName: jenkins-pv
         accessModes:
        - ReadWriteOnce
          capacity:
         storage: 10Gi
         persistentVolumeReclaimPolicy: Retain
          hostPath:
         path: /data/jenkins-volume/
  4) Run the following command to apply the spec:
      $ kubectl apply -f jenkins.volume.yaml

*) Install Jenkins

   1) To enable persistence, you will create an override file and pass it as an argument
      to the Helm CLI. Paste the content from https://raw.githubusercontent.com/kubernetes/
      charts/master/stable/jenkins/values.yaml into a file called values.yaml. 
     Then, open the values.yaml file in your favourite text editor and modify the following line
       storageClass:
         to:
      storageClass: jenkins-pv
 2) Now you can install Jenkins by running the helm install command
    $ helm install jenkins -f values.yaml stable/jenkins --namespace jenkins
 3) Depending on your environment, it can take a bit of time for Jenkins to start up.
   Enter the following command to inspect the status of your Pod
    $ kubectl get pods --namespace=jenkins
    Once Jenkins is installed, the status should be  set to Running as in the following output:
      $kubectl get pods --namespace=jenkins
      NAME                       READY   STATUS    RESTARTS   AGE
      jenkins-645fbf58d6-6xfvj   1/1     Running   0          2m
4) To access your Jenkins server, you must retrieve the password by entering the following command:
   printf $(kubectl get secret --namespace jenkins jenkins -o jsonpath="{.data.jenkins-admin-password}" 
    | base64 --decode);echo
5) Get the name of the Pod running that is running Jenkins using the following command 
   export POD_NAME=$(kubectl get pods --namespace jenkins -l "app.kubernetes.io/component=jenkins-master"
    -l "app.kubernetes.io/instance=jenkins" -o jsonpath="{.items[0].metadata.name}")
6) Use the kubectl command to set up port forwarding:
   $ kubectl --namespace jenkins port-forward $POD_NAME 8080:8080


*) Installing Plugin for Kubernetes

 1) Click on "Manage Jenkins" in the left-hand side
 2) Click on "Manage Plugins."
 3) In the "Available" tab, search for "Kubernetes."
 4) Check the box next to the "Kubernetes" plugin.
 5) Click on the "Install without restart" button.
 6) After the installation, you will be redirected to the main Jenkins dashboard.
 7) To configure the Kubernetes plugin, click on "Manage Jenkins" and then "Configure System."
 8) Scroll down to the "Cloud" section and click the "Add a new cloud" button.
 9) Select "Kubernetes" from the dropdown list.


*) Integrating Terraform with Jenkins

  1) Click on "Manage Jenkins" in the left-hand sidebar.
  2) Click on "Manage Plugins."
  3) In the "Available" tab, search for "Terraform."
  4) Check the box next to the "Terraform" plugin.
  5) Click on the "Install without restart" button

*) Configure the Terraform Plugin

 1) After the installation, you will be redirected to the main Jenkins dashboard.
 2) To configure the Terraform plugin, click on "Manage Jenkins" and then "Configure System."
 3) Scroll down to the "Terraform" section
 4) In the "Terraform Executable" section, provide the path to the Terraform executable on your
   Jenkins server. Ensure that Terraform is installed and available on the Jenkins server or on
   the nodes where your Jenkins agents run.
 5) Once you've filled in the necessary information, click the "Save" button to save your configuration.


*) Integrating SonarQube With Jenkins

  1) Click on "Manage Jenkins" in the left-hand side
  2) Click on "Manage Plugins."
  3) In the "Available" tab, search for "SonarQube Scanner."
  4) Check the box next to the "SonarQube Scanner" plugin.
  5) Click on the "Install without restart" button.


*) Configure SonarQube Server in Jenkins

 1) After installing the SonarQube Scanner plugin, return to the Jenkins dashboard.
 2) Click on "Manage Jenkins" and then "Configure System."
 3) Scroll down to the "SonarQube Servers" section.
 4) Click the "Add SonarQube" button to add your SonarQube server details.
 5) Provide a name for your SonarQube server configuration, the server URL, and the
    authentication token. You can generate an authentication token in your SonarQube 
    instance by following the official documentation.
 6) Click "Save" to save your SonarQube server configuration.


*) Integrating AWS with Jenkins

 1) AWS Credentials Plugin
 2) AWS Steps Plugin (formerly known as the EC2 Plugin)
 3) Pipeline plugin


*) Configure AWS Credentials in Jenkins

 1) In the Jenkins dashboard, click on "Manage Jenkins" in the left-hand side
 2) Click on "Manage Credentials."
 3) Under the "System" section, click on "Global credentials (unrestricted)."
 4) Click on "Add Credentials."
 5) Select "AWS Credentials" as the kind of credentials.
 6) Provide your AWS Access Key ID and Secret Access Key. You can also use
   an IAM user with appropriate permissions. 
   like:- which type of Resource you want to implement
 7) Optionally, you can specify a description for the credentials.
 8) Click "OK" to save your AWS credentials.


*)  Integrating the Grafana with Jenkins


 1)  In the Jenkins dashboard, click on "Manage Jenkins" in the left-hand side.
 2) Click on "Manage Plugins."
 3) In the "Available" tab, search for the "Grafana" plugin.
 4) Check the box next to the "Grafana" plugin and click "Install without restart."


*) Configure the Grafana Integration in Jenkins


 1)  After installing the Grafana plugin, return to the Jenkins dashboard.
 2) Click on "Manage Jenkins" and then "Configure System."
 3) Scroll down to the "Grafana" section.
 4) In the "Grafana Server URL" field, enter the URL of your Grafana server,
   e.g., http://grafana.example.com.
 5) If your Grafana server requires authentication, you can provide the
    username and password in the respective fields.
 6) Click "Save" to save your Grafana configuration in Jenkins.

*) Create a Grafana Dashboard

 1) Log in to your Grafana instance.
 2) Create a new dashboard or edit an existing one.
 3) Add a new panel to the dashboard.
 4) Configure the panel to display the data you want, such as Jenkins build metrics,
   job execution times, or other relevant information. You can use data sources like 
   Prometheus, InfluxDB, or other time-series databases to collect Jenkins metrics.
 5) Save the dashboard with a name that reflects its purpose, and ensure it's set as
    the home dashboard if you want it to be the default view when you log in.


*) How to setup Slave Node?

   *)  Ensure that Java is installed on the slave machine as Jenkins requires "Java" to run. Additionally,
       the slave machine should be able to access the Jenkins master over the network.

     1) Log in to the slave machine.

        Download the Jenkins agent JAR file (agent.jar) from your Jenkins master
          *) Open your Jenkins "master" web interface.
          *) goto to the master's home page.
          *)   Click "Manage Jenkins" -> "Manage Nodes and Clouds."
          *) Click "New Node" (or) "New Agent" to create a new node.
          *) Configure the node details
          *) Node name: Enter a name for your slave (e.g., "my-slave1").
          *) Choose "Permanent Agent."
          *) Click "OK."
          *)  On the next page, you'll see the download link for the agent.jar file. Copy the URL.
          *) goto slave machine ->On the slave machine, download the agent.jar using the URL you copied
              $ wget http://your-jenkins-master-url:port/jnlpJars/agent.jar
          *) Replace http://your-jenkins-master-url:port with the actual URL of your Jenkins master.
              ex:- http://10.2.3.50:8080

   2) Launch the Jenkins Slave

      *) Open a terminal on the slave machine.
      *) Run the Jenkins agent using the java -jar command with the agent.jar file:
          $ java -jar agent.jar -jnlpUrl http://your-jenkins-master-url:port/computer/my-slave/slave-agent.jnlp
            -secret your-secret
      *) Replace:-
          -> http://your-jenkins-master-url:port with your Jenkins master URL.
          my-slave with the node name you specified.
      *) your-secret with the secret generated by Jenkins for the agent.

   3) Verify the Slave Connection

     *) On your Jenkins master
     *) Navigate to "Manage Jenkins" -> "Manage Nodes and Clouds."
     *) You should see your slave listed as online.

   4)  Create a Jenkins Job for the Slave

       Now that your slave is connected, you can create a Jenkins job to run on the slave.
       *) Create a new Jenkins job (or) edit an existing one.
       *) In the job configuration-> you can specify that it should run on the slave you've set up by
          selecting the appropriate label (node) or by using the "Restrict where this project can be
          run" field.
       *) Here's an example pipeline job using a specific label for the slave


         pipeline {
            agent {
              label 'my-slave'
                 }
                   stages {
                       stage('Build') {
                         steps {
                        // Your build steps here
                              npm run 'build'
                         }
                       }
                          stage('Test') {
                                steps {
                                  // Your test steps here
                                      'java -m unittest discover'
                           }
                       }
                   }
               }

    
 








 

  
  



  
