**) Setup Jenkins in Docker Container

1) First, log in to your AWS account and go to the EC2 service. There launch any free tier
   for ex:- Amazon Linux machine
          ubuntu
          Redhat
 *) Make sure your Security inbound rules allow . So that you don’t have
    any further issues.
2) After launching, SSH to that EC2 instance. And Install Docker by running the
  following commands.
   $ sudo yum update -y         
   # To update all packages
   $ sudo amazon-linux-extras install docker 
   # To install docker latest version
   $ sudo service docker start     
   # To start docker service
   $ sudo service docker status     
   # To check status of docker service, If it's running or not.
   $ sudo systemctl enable docker                 
   # To ensure that docker service start after each reboot 
   $ sudo usermod -a -G docker ec2-user           
   # To add ec2-user to docker group
*) Now, to check if docker is installed or not. Run below command and match with
   an image attached further.
   $ docker  -v               
   # It will give you docker version
3)  Now we will pull the Jenkins image using docker from the docker hub. 
    Run the below command :
    $ docker pull jenkins/jenkins      
    # To pull the image of jenkins
    $ docker images                     
    # To see if image is downloaded or not
4) Since in docker images we can see our Jenkins image. Now we can make our
  Jenkins container. But before that make a directory. Run below command 
    $ mkdir jenkins       
    #To make directory name jenkins 
    After making this directory run the below command Please refer to the
    image attached ahead for a better understanding.
    $ docker run -d --name jenkins -p 8080:8080 -v $PWD/jenkins/ jenkins/jenkins    
    # To run a container name jenkins using jenkins image 
    $ docker ps                                                                     
    # To see if container is running or not 
  *) Now, copy the Public IPv4 address of the EC2 instance.
  *) After copying it. Paste it into a new tab and write it with port 8080
  *) After running this, you’ll see a screen
5) To get this password. Run the below command in the EC2 instance and copy the password. 
   $ docker logs jenkins                         
   #To see logs of the container name jenkins
  *) After entering this password, Install all the plugins (it may take a while). 
6) Once all the plugins are installed you’ll be asked to make a user with a password and After
   making that user. You’ll be logged into Jenkins.


**) setup Jenkins on Kubernetes

1) First, use kubectl to create the Jenkins namespace:
   $ kubectl create namespace jenkins
   Next, create the YAML file that will deploy Jenkins.
*) Create and open a new file called jenkins.yaml using nano or your preferred editor:
   $ nano jenkins.yaml
   Now add the following code to define the Jenkins image, its port,
   and several more configurations:
       file name:- jenkins.yaml
       
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: jenkins
              spec:
                replicas: 1
                selector:
                   matchLabels:
                    app: jenkins
            template:
             metadata:
             labels:
               app: jenkins
          spec:
           containers:
            - name: jenkins
             image: jenkins/jenkins:lts
             ports:
            - name: http-port
              containerPort: 8080
             - name: jnlp-port
              containerPort: 50000
        volumeMounts:
          - name: jenkins-vol
            mountPath: /var/jenkins_vol
        volumes:
          - name: jenkins-vol
             emptyDir: {}
    *) This YAML file creates a deployment using the Jenkins LTS image and also opens port 8080 and 50000.
       You use these ports to access Jenkins and accept connections from Jenkins workers respectively.
*) Now create this deployment in the jenkins namespace
   $ kubectl create -f jenkins.yaml --namespace jenkins
*) Use kubectl to verify the pod’s state:
   $ kubectl get pods -n jenkins
  *) Once the pod is running, you need to expose it using a Service. You will use the NodePort Service type 
    for this tutorial. Also, you will create a ClusterIP type service for workers to connect to Jenkins.
*) Create and open a new file called jenkins-service.yaml:
   $ nano jenkins-service.yaml
   Add the following code to define the NodePort Service:

       jenkins-service.yaml
       apiVersion: v1
       kind: Service
       metadata:
        name: jenkins
         spec:
         type: NodePort
         ports:
         - port: 8080
           targetPort: 8080
           nodePort: 30000
       selector:
      app: jenkins

        ---

          apiVersion: v1
           kind: Service
           metadata:
           name: jenkins-jnlp
         spec:
           type: ClusterIP
          ports:
           - port: 50000
             targetPort: 50000
        selector:
        app: jenkins

  *)  Now create the Service in the same namespace:
    $ kubectl create -f jenkins-service.yaml --namespace jenkins
    Check that the Service is running:
    $ kubectl get services --namespace jenkins
   
2) Accessing Jenkins Ui

*) In this step, you will access and explore the Jenkins UI. Your NodePort service is accessible
  on port 30000 across the cluster nodes. You need to retrieve a node IP to access the Jenkins UI.
  Use kubectl to retrieve your node IPs:
     $ kubectl get nodes -o wide
   *) Copy one of the your_external_ip values
   *) Now open a web browser and navigate to http://your_external_ip:30000.
   *) A page will appear asking for an administrator password and instructions on retrieving this 
      password from the Jenkins Pod logs.
   *) Let’s use kubectl to pull the password from those logs.
      First, return to your terminal and retrieve your Pod name:
      $ kubectl get pods -n jenkins
   *) You will receive an output like this
      NAME                       READY   STATUS    RESTARTS   AGE
      jenkins-6fb994cfc5-twnvn    1/1    Running      0       9m54s
*) Next, check the Pod’s logs for the admin password. Replace the highlighted section with your pod name
    $ kubectl logs jenkins-6fb994cfc5-twnvn -n jenkins
   *) You might need to scroll up or down to find the password
   *) Copy your_jenkins_password. Now return to your browser and paste it into the Jenkins UI


**) setup jenkins in Debian/Ubuntu

*) On Debian and Debian-based distributions like Ubuntu you can install Jenkins through apt.
*) Long Term Support release
  A LTS (Long-Term Support) release is chosen every 12 weeks from the stream of regular releases
  as the stable release for that time period. It can be installed from the debian-stable apt repository.

 $ sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
  echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
  $ sudo apt-get update
  $ sudo apt-get install jenkins
*) Installation of Java
  Jenkins requires Java to run, yet not all Linux distributions include Java by default.
   Additionally, not all Java versions are compatible with Jenkins.
       $ sudo apt update
       $ sudo apt install fontconfig openjdk-17-jre
       $ java -version

*) Start Jenkins
  You can enable the Jenkins service to start at boot with the command:
     $ sudo systemctl enable jenkins
     You can start the Jenkins service with the command:
     $ sudo systemctl start jenkins
     You can check the status of the Jenkins service using the command:
     $ sudo systemctl status jenkins

  **) setup jenkins in Amazon Linux

     *)  Ensure that your software packages are up to date on your instance by using the 
         following command to perform a quick software update:
           $ sudo yum update –y
         Add the Jenkins repo using the following command:
           $ sudo wget -O /etc/yum.repos.d/jenkins.repo \
           https://pkg.jenkins.io/redhat-stable/jenkins.repo
        Import a key file from Jenkins-CI to enable installation from the package:
         $ sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
         $ sudo yum upgrade
         Install Java (Amazon Linux 2023):
         $ sudo dnf install java-17-amazon-corretto -y
         Install Jenkins:
         $ sudo yum install jenkins -y
         Enable the Jenkins service to start at boot:
         $ sudo systemctl enable jenkins
         Start Jenkins as a service:
         $ sudo systemctl start jenkins
         You can check the status of the Jenkins service using the command:
         $ sudo systemctl status jenkins



